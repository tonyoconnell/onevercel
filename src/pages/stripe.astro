---
import { Stripe as StripeClient } from "stripe";
import Layout from "../layouts/Layout.astro";

let session;
let error: string | null = null;

try {
  const stripeKey = import.meta.env.STRIPE_SECRET_KEY;
  if (!stripeKey) {
    throw new Error('Stripe secret key is not configured');
  }

  const stripe = new StripeClient(stripeKey, {
    apiVersion: '2025-01-27.acacia' // Add explicit API version
  });
  
  const { origin } = Astro.url;
  console.log('Creating Stripe session with origin:', origin); // Debug log
  
  session = await stripe.checkout.sessions.create({
    mode: "subscription",
    line_items: [
      {
        price: "price_0MC5WIqs14Mpveu1bfwvrkq6",
        quantity: 1,
      },
    ],
    success_url: `${origin}/thankyou?session_id={CHECKOUT_SESSION_ID}`,
    cancel_url: `${origin}/stripe`,
  });

  if (session.url) {
    return Astro.redirect(session.url);
  }
} catch (e) {
  console.error('Stripe error details:', {
    error: e,
    message: e instanceof Error ? e.message : 'Unknown error',
    env: !!import.meta.env.STRIPE_SECRET_KEY ? 'Key exists' : 'Key missing'
  });
  error = e instanceof Error ? e.message : 'An error occurred with the payment system';
}
---

<Layout title="Stripe Payment">
  <main className="container mx-auto px-4 py-8">
    {error ? (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong className="font-bold">Error: </strong>
        <span className="block sm:inline">{error}</span>
      </div>
    ) : (
      <p className="text-gray-600">Processing your payment...</p>
    )}
    
    <div className="mt-4">
      <p className="text-sm text-gray-500">Note: Change the price ID to match what you have in Stripe</p>
    </div>
  </main>
</Layout>
